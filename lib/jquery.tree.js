// Generated by CoffeeScript 1.6.3
(function() {
  var factory;

  factory = function($, window, document) {
    var PLUGIN_NAME, Plugin, defaults;
    if ($ == null) {
      $ = jQuery;
    }
    PLUGIN_NAME = 'tree';
    defaults = {
      content: '.content',
      list: '.list'
    };
    Plugin = (function() {
      function Plugin(element, options) {
        var $content, $contentNodes, $headers, $list, $listContainer, listify,
          _this = this;
        this.element = element;
        this._name = PLUGIN_NAME;
        this.settings = $.extend({}, defaults, options);
        this._defaults = defaults;
        $content = $(this.settings.content);
        $contentNodes = $content.find('*');
        $listContainer = $(this.settings.list);
        $headers = $content.find(':header');
        listify = function($nodes) {
          var $between, $list, listifyBetween, topHeaderLevel;
          topHeaderLevel = _this.topHeaderLevel($nodes);
          if (topHeaderLevel == null) {
            return null;
          }
          $list = $("<ul/>");
          $between = $();
          listifyBetween = function() {
            if ($between.length > 0) {
              $list.find("li").last().append(listify($between));
              return $between = $();
            }
          };
          $nodes.each(function() {
            var $item, $link, $node;
            $node = $(this);
            if (!$node.is("h" + topHeaderLevel)) {
              return $between = $between.add($node);
            } else {
              listifyBetween();
              $link = $('<a/>').html($node.html());
              $item = $('<li/>').append($link);
              $item.data("plugin_" + PLUGIN_NAME + "_header", $node);
              $node.data("plugin_" + PLUGIN_NAME + "_item", $item);
              return $list.append($item);
            }
          });
          listifyBetween();
          return $list;
        };
        $list = listify($contentNodes);
        $listContainer.append($list);
        $('li:first').addClass('active');
        this.isOnScreen;
        $(window).scroll(function() {
          return $.each($headers, function(i, header) {
            var $current, $li, difference;
            $current = $(header);
            difference = $current.offset().top - $(window).scrollTop();
            if (difference < 100) {
              $('.active').removeClass('active');
              $current.addClass('active');
              $li = $('li');
              return $($li.get(i)).addClass('active');
            }
          });
        });
      }

      Plugin.prototype.isOnScreen = function() {
        var win;
        win = $(window);
        return console.log(win.scrollTop());
      };

      Plugin.prototype.headerDepth = function(el) {
        return parseInt(el.nodeName.slice(-1));
      };

      Plugin.prototype.topHeaderLevel = function($nodes) {
        var num, _i;
        for (num = _i = 1; _i <= 6; num = ++_i) {
          if ($nodes.is("h" + num)) {
            return num;
          }
        }
        return null;
      };

      return Plugin;

    })();
    return $.fn[PLUGIN_NAME] = function(options) {
      return this.each(function() {
        if (!$.data(this, "plugin_" + PLUGIN_NAME)) {
          return $.data(this, "plugin_" + PLUGIN_NAME, new Plugin(this, options));
        }
      });
    };
  };

  (function(factory, window, document) {
    if (typeof define === 'function' && define.amd) {
      return define(['jquery'], factory);
    } else if (typeof exports === 'object') {
      return factory(require('jquery'), window, document);
    } else {
      return factory(jQuery, window, document);
    }
  })(factory, window, document);

}).call(this);

/*
//@ sourceMappingURL=jquery.tree.map
*/
